import type { NextPage } from "next";
import Head from "next/head";
import { initialData } from "../db/initialData";
import { DragDropContext } from "react-beautiful-dnd";
import { useEffect, useState } from "react";
import Column from "../components/Column";
import { BsPlus } from "react-icons/bs";

const Home: NextPage = () => {
  const [data, setData] = useState(initialData);
  const [show, setShow] = useState(false);
  const newData = JSON.parse(JSON.stringify(data));

  useEffect(() => {
    setShow(true);
  }, []);

  const handleDragEnd = (result: any) => {
    const { destination, source, draggableId } = result;

    const start = initialData.items.find(
      (item) => item.status === source.droppableId
    );
    const finish = initialData.items.find(
      (item) => item.status === destination?.droppableId
    );

    if (!destination) {
      return;
    }
    if (
      destination.droppableId === source.droppableId &&
      destination.index === source.index
    ) {
      return;
    }

    if (start === finish) {
      const colId = source.droppableId;
      const itemIdd = initialData.items.filter(
        (item) => item.status === source.droppableId
      );
      const itemId = itemIdd.map((item) => item.tasks);
      const itemIds = itemId.map((item) =>
        item.find((task) => task.id === draggableId)
      );

      itemId[0]?.splice(source.index, 1);
      itemId[0]?.splice(destination.index, 0, itemIds[0]!);
      const newData = {
        ...data,
        items: data.items.map((item) => {
          if (item.status === colId) {
            return {
              ...item,
              tasks: item.tasks,
            };
          }
          return item;
        }),
      };
      setData(newData);
    }

    if (start !== finish) {
      const startTask = start?.tasks;
      startTask?.splice(source.index, 1);
      const newStartTask = {
        ...start,
        tasks: startTask,
      };

      const finishTask = finish?.tasks;
      const itemIdd = newData.items.filter(
        (item: any) => item.status === source.droppableId
      );
      const itemId = itemIdd.map((item: any) => item.tasks);
      const itemIds = itemId.map((item: any) =>
        item.find((task: any) => task.id === draggableId)
      );

      finishTask?.splice(destination.index, 0, itemIds[0]!);
      const newFinishTask = {
        ...finish,
        tasks: finishTask,
      };
      const colId = source.droppableId;

      const asd = {
        ...data,
        items: data.items.map((item) => {
          if (item.status === colId) {
            return {
              ...item,
              tasks: newStartTask.tasks,
            };
          }
          if (item.status === destination.droppableId) {
            return {
              ...item,
              tasks: newFinishTask.tasks,
            };
          }
          return item;
        }),
      };
      setData(asd as any);
    }
  };
  return (
    <DragDropContext onDragEnd={handleDragEnd}>
        <div className="bg-gray-50">
        <Head>
          <title>Kartana</title>
          <meta name="description" content="Generated by create-t3-app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <div className="flex items-center p-5 gap-4 border-b-2 ">
          <h1 className="text-xl font-semibold">Kartana Board</h1>
        <p className="text-xl">{data.count}</p>
        <button className="p-1 pl-2 pr-2 items-center font-semibold border-2 border-dashed rounded-md flex"><BsPlus/>  Filter</button>
        </div>
        <div className="flex h-screen p-5 gap-10">
          {show &&
            data.items.map((item, index) => {
              return (
                <>
                  <Column item={item} index={index} key={item.status}/>
                </>
              );
            })}
        </div>
    </div>
      </DragDropContext>
  );
};

export default Home;
